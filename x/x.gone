// Package x provides an interactive viewer for BruteRay.
package x

import (
	"fmt"
	"os"
	"runtime"
	"strings"

	"github.com/barnex/bruteray/tracer"
	"golang.org/x/exp/shiny/screen"
)

type UI struct {
	spec   tracer.Spec
	win    screen.Window
	events <-chan event
}

// X opens a window that renders a scene specification
func Display(spec tracer.Spec) {
	newUI(spec).Run()
}

func newUI(s tracer.Spec) *UI {
	return &UI{
		spec: s,
	}
}

func (u *UI) Run() {
	//s := sampler.NewAdaptive(spec.ImageFunc(), 400, 300, false)

	u.win = showWindow("BruteRay")
	u.events = goPipeEvents(u.win)
	//rendered := make(chan image.Image)

	for {
		select {
		case e := <-u.events:
			u.drainEvents(e)

			//case img := <-rendered:
			//	drainRendered(img, rendered)
			//}
		}
	}
}

func (u *UI) handleEvent(e event) {
	defer trace(e)()
}

func (u *UI) drainEvents(first event) {
	u.handleEvent(first)
	for {
		select {
		default:
			break
		case e := <-u.events:
			u.handleEvent(e)
		}
	}
}

//onEvent := func(w Window, e interface{}) {
//	w.Repaint()
//}
//paint := func(buf *image.RGBA) {
//	draw.Draw(buf, buf.Bounds(), image.NewUniform(color.Black), image.ZP, draw.Src)
//	draw.Draw(buf, buf.Bounds(), s.Image(), image.ZP, draw.Src)
//}

//NewXWindow("BruteRay", paint, onEvent)
//for {
//	s.Sample(1)
//}

func check(err error) {
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func trace(x ...interface{}) func() {
	pc, _, _, _ := runtime.Caller(1)
	caller := runtime.FuncForPC(pc).Name()
	caller = strings.TrimPrefix(caller, "github.com/barnex/bruteray/")
	fmt.Print(caller, ": ", fmt.Sprintln(x...))
	return func() {}
}
